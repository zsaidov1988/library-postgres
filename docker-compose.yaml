version: '3.7'

services:

  web:
    image: web:latest
    volumes:
      - '.:/app'
      - '/app/node_modules'
    ports:
      - 4010:7000
    networks:
      - db
    environment:
      - HOST_POSTGRES=postgres
    depends_on:
      - postgres
    deploy:
      replicas: 2
      placement: 
        constraints: 
          - node.role == manager
    #   replicas: 3
    #   update_config:
    #     parallelism: 2
    #     delay: 10s
    #   restart_policy:
    #     condition: on-failure
    #   resources:
    #     limits:
    #       cpus: "2"
    #       memory: 4G
    #     reservations: 
    #       cpus: "1"
    #       memory: 3G
  
  postgres:
    image: postgres:9.6
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=library
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
    ports:
      - 5433:5432
    networks:
      - db
    deploy:
      replicas: 2
      placement: 
        constraints: 
          - node.role != manager
    # deploy:
    #   placement: 
    #     constraints: 
    #       - node.role != manager
  
  # portainer:
  #   image: portainer/portainer:latest
  #   container_name: portainer
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   ports:
  #     - 9000:9000
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./portainer-data:/data
  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    deploy:
      replicas: 2
      placement: 
        constraints: 
          - node.role != manager
  nginx:
    image: nginx:latest
    container_name: "nginx-service"
    deploy:
      replicas: 2
      placement: 
        constraints: 
          - node.role != manager
  mongodb:
    image: mongo:latest
    container_name: "mongo-service"
    deploy:
      replicas: 2
      placement: 
        constraints: 
          - node.role != manager
networks:
  db:

volumes:
  postgres-data: